/**
 * Create an array type with < > access operators, just as a proof of concept
 */
class Array {
  var data : container.FlatArray[int]
  val size : container.size_t
  
  new(size := size : container.size_t) {
    data = new container.FlatArray[int](size)
  }
  delete {
    delete data;
  }

  def get(index : container.size_t) : int = data.apply(index);

  def set(v : int, index : container.size_t) : void = data.update(index, v);


  // prefer this operator over container.size_t <, because it would yield a bool and get stuck
  def < (index : container.size_t) : ArrayIndexOp <: operator.precedence[91] {
    new ArrayIndexOp(this, index);
  }

  test "use" {
    val arr = new Array(2L)
    arr<0L> = 0
    0 == arr<0L>
  }

  test "update" {
    val arr = new Array(2L)
    arr<0L> = -1
    arr<1L> = 2
    0 != arr<0L> &&
    -1 == arr<0L> &&
    2 == arr<1L>
  }

  test "compare" {
    val arr = new Array(2L)
    arr<0L> != arr<1L> && {
      arr<0L> = -1
      arr<1L> = 2
      arr<0L> != arr<1L>
    }
  }

  test "KaRazy" {
    val arr = new Array(2L)
    val Ka = arr < 0L
    val Razy = Ka >;
    Razy = 1

    Razy == 1 && 1 == arr<0L>
  }
}

/**
 * This is the type of "array<index",i.e. without ">"
 */
type ArrayIndexOp <: noVar {
  val target : Array
  val index : container.size_t;

  new (target := target : Array, index := index : container.size_t);

  // prefer this operator over container.size_t <, because it would yield a bool and get stuck
  def > : ArrayAccessOp <: operator.precedence[91], operator.postfix
        = new ArrayAccessOp(target, index)
}

/**
 * This is the type of > in "array<index>"

 */
type ArrayAccessOp <: proxy[int], joinImplicit, noVar {
  val target : Array
  val index : container.size_t;

  new (target := target : Array, index := index : container.size_t);

  def implicit() : int = target.get(index)

  def `=` (v : int) : void = target.set(v, index)
}
