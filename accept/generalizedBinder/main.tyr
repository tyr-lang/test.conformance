/**
 * test test usage of generalized binders
 *
 * @todo improve this test as soon as collections are available
 */
type Main {

  // [0;9].fold(intial)(step)
  type def fold(initial : int, 
                left : BlockParameter[int], right : BlockParameter[int],
                step : Block[int]) : int {
    var idx : int = 0;
    var r = initial;
    while(idx < 10) {
      left = r;
      right = idx;
      idx = idx + 1;
      r = step.eval();
    }
    r
  }

  test "bool" {
    true.`&&` do { "correct\n"!!; false || true}
  }

  test "fold zero" {
    0 == (fold(0) i:int, j:int do {0})
  }
  test "fold drop" {
    9 == (fold(0) i:int, j:int do {j})
  }
  test "fold sum" {
    45 == (fold(0) i:int, j:int do {i+j})
  }

  // check parsability
  test "fold dududu" {
    9 == (fold(0) i:int, du:int do { do { du } while false})
  }

  test "fold flow hard" {
    var x : int = 0
    var z : int;
    (x == 0 &&
     x != (z=(fold(0) i:int,j:int do {x=j; if (x > 5) {x = 5}; j})) &&
     x == 5 &&
     z == 9
    )
  }

  test "fold flow" {
    var x : int = 0;
    var z : int = (fold(0) i:int,j:int do {
      x = j
      if (x > 5) {
        x = 5
      }
      i
    });

    x == 5 && z == 0
  }

  test "fold flow j" {
    var x : int = 0;
    var z : int = (fold(0) i:int,j:int do {
      x = j
      if (x > 5) {
        x = 5
      }
      j
    });

    x == 5 && z == 9
  }

  test "fold leak" {
    var x : int = 0
    var z : int = (fold(0) i:int,j:int do {
      x = j
      i
    })

    x == 9
  }

  test "fold type" {
    var x : int = 0
    var z : int = (fold(0) i:int,j:int do {
      x = j
      // TODO remove this shitty implicit conversion!
      val r:int = i.implicit()
      r
    })

    x == 9
  }
}
