/**
 * Test implicit : T.
 */
type S {
  new {}

  def f : int = 3

  test "f" {
    3 == (new S).f()
  }
}

type T <: proxy[S] {
  new {}

  def implicit : S = new S

  test "f" {
    3 == (new T).f()
  }

  test "if" {
    3 == (new T).implicit().f()
  }
}

type U <: proxy[T] {
  new {}

  def implicit : T = new T

  test "f" {
    3 == (new U).f()
  }
  test "if" {
    3 == (new U).implicit().f()
  }
  test "iif" {
    3 == (new U).implicit().implicit().f()
  }
}

type V <: U {
  new {}

  test "f" {
    3 == (new V()).f()
  }
}
