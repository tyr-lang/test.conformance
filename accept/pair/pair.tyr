/**
 * This test should eventually work fine and should not result in infinite type
 * instantiation.
 */
type Pair [A : Type, B : Type] {
  var a : A;
  var b : B;

  new (a := a : A, b := b : B) {}

  def swap : Pair[B, A] = new Pair[B,A](b,a);

  test "swap swap" {
    var p = new Pair[int, int](2,3)
    // this test requires Eq!
    p != p.swap() && p == p.swap().swap()
  }

  test "swap swapk 2" {
    var p = new Pair(int, long)(2,3L)
    p == p.swap().swap()
  }
}

/* This type should also be fine */
type Box [T : Type] {
  var content : T;

  new (content := content : T) {}

  type def box [T: Type] (content : T) : Box[T] <: static = new Box[T](t);
  def unbox : T = content;

  test "box unbox" {
    var b = Box.box[int](7);
    7 == b.unbox();
  }

  test "box box" {
    var b = Box.box[int](7);
    var bb = Box.box[b.type](b);
    7 == bb.unbox().unbox();
  }
}
