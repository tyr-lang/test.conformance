/**
 * The computation will result in an exception on termination.
 *
 * @todo WillThrow inherits from every other type except NoReturn, as any result
 *       can be produced by throwing an exception before its production.
 *
 * @todo Add generic type parameter for exception types that should be expected.
 *
 * @todo Check that only NoReturn implements WillThrow
 *
 * @note It should be legal to throw an exception at places where a type has to
 * be supplied. The semantics of such a behaviour would be that the throw
 * happens before the evaluation of that type. Such unevaluatable types can be
 * replaced by Class[NoReturn].
 *
 * @note this is an interface, as value type interfaces are the only legal
 * subtype of anything else.
 */
interface WillThrow[T : Type/*Class/*[Exception] <: covariant*/] <: any, native;

/**
 * The computation will not terminate, i.e. control flow will somehow not get to
 * this point. To some it might appear counter-intuitive that the type of a
 * return expression is NoReturn. This is because the evaluation of a return
 * cannot be observed from the perspective of the subsequent instruction in the
 * same function following regular control flow.
 *
 * @note this is an interface, as value type interfaces are the only legal
 * subtype of anything else.
 */
interface NoReturn <: any, WillThrow[Null], native;
