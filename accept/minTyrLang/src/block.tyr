/**
 * A block can be passed to cheaply abstract from function implementations.
 * In functional programming, this would be a Î»-expression.
 * In contrast to functional programming, we care about efficiency and the
 * quality of generated code.
 * Therefore, we pass a block of computation in the front-end to an
 * implementation and generate code at call-site.
 * This strategy allows encapsulation on both sides.
 * In constrost to passing of function pointers, this strategy cannot be applied
 * to dynamically dispatching methods, as the called function implementation has
 * to be known to the front-end.
 * Likewise, dynamic linking cannot be combined with block-parameters.
 * On the positive side, the generated code can be fully optimized.
 *
 * @note A block is constructed automatically on overload resolution.
 *
 * @note In case of dispatching methods, the static type of the argument decides
 *       which implementation is taken. I.e. if an array is known to be an
 *       array, efficient indexing based iteration can be created. Otherwise,
 *       an iterator will be created. This behaviour is optimal in the sense
 *       that a programmer cannot safely write better code. It relies on
 *       overriding methods not blattantly violating their interface, which is
 *       a general rule of inheritance.
 *
 * @note The dependent block parameters cannot be reflected as part of the
 *       Blocks type atm.
 *
 * @note If a function taking a block would update a parameter of the block, 
 *       then, that very function would take a BlockParameter.
 *
 * @note The evaluation of a function taking Blocks will evaluate each parameter
 *       at most once, i.e. non-CT parameters will be stored in anonymous values.
 *
 * @todo should be covariant
 *
 * @author Timm Felden
 */
type Block[T : Type] <: CT, native, noVar {

  /**
   * Implicit conversion at compile time into regular execution of an expression.
   *
   * @note this function cannot be inline, as it would make function bodys using
   *       blocks unrealizable
   */
  def eval : T <: CT, native;
}

/**
 * Block parameters are invariant in T. Hence, the shape in matching parameters
 * with inferred type requires a marker type.
 *
 * @todo should be abstract
 *
 * @todo could be replaced by an existantial type BlockParameter[Type.some(true)]
 *
 * @author Timm Felden
 */
type ABlockParameter <: noVar;

/**
 * A block prameter can be constructed from the name of a local variable.
 *
 * @note The name introduced by a generalized binder is a variable.
 *
 * @note A BlockParameter is constructed automatically on overload resolution
 *       iff the argument is a direct usage of a local variable.
 *
 * @note Multiple blocks may depend on the same block parameter
 *
 * @note The dependency on the block cannot be typed with sane effort atm.
 *
 * @author Timm Felden
 */
type BlockParameter[T : Type] <: ABlockParameter, native, CT, noVar {

  /** 
   * Update a block parameter.
   */
  def `=` (v : T) : void
          <: CT, native, operator.precedence[20], operator.rightAssociative;
}
