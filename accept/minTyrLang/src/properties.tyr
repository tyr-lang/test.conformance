/**
 * Anything that inherits this property is handled by the compiler directly.
 * If an entity has this property and is not known by the compiler, the package
 * will be rejected.
 *
 * @author Timm Felden
 */
property native;

/**
 * Make the target type abstract, i.e. no instances of it can be constructed.
 */
property abstract;

/**
 * Dissallow subtyping/overriding on the target declaration.
 */
property final;

/**
 * Flag a function to override a function of a super type.
 * TODO should take an opotional type argument to ensure that a specific function
 * is overridden.
 */
property overrides;


/**
 * Iff overload resolution fails on a type with this property, another attempt
 * is performed in T. This behaviour is recursive.
 *
 * @note there is currently no cycle checking
 *
 * @note proxy[T] should be used in conjunction with def implicit : T
 *
 * @author Timm Felden
 */
property proxy[T : Type];


/**
 * An instance must hold a single implicit conversion that will be executed
 * before performing a join.
 * This property is required to implement a natural behaviour for proxies that
 * do not have a common supertype with their targets, such as Ref[T].
 *
 * @note This property is ignored, if all arguments have the same type
 *
 * @example:
 *  var x = ""
 *  val y = if phi "" else x // we would expect y to be a String and not pointer
 *
 * @example:
 *  var x = ""
 *  var y = ""
 *  val z = if phi x else y
 *  // here we get z : Ref[StringLiteral], because x and y have the same type
 *
 * @author Timm Felden
 */
property joinImplicit;


/**
 * A compile-time value. An application of a CT function on CT operands can and
 * should be evaluated at compile time.
 *
 * @note the compiler is free to tag a function whose implementation
 * depends only on CT operands and its parameters and that has only applications
 * of CT functions in its body CT. (note: in case of dependency SCCs, this
 * property has to hold for every member of the the SCC in order to turn the
 * whole SCC CT)
 *
 * @author Timm Felden
 */
property CT;


/**
 * A call to an inline function will be treated by the front-end. A back-end
 * will not create a representation for such a function.
 *
 * @note It is the responsibility of the caller to ensure that the call graph is
 *       acyclic.
 *
 * @note Functions taking Block-Parameters receive an implicit inline property.
 *
 * @author Timm Felden
 */
property inline;


/**
 * An instance of this type cannot be a var.
 * This will cause a var with this infered type to T, if the target has an
 * isVal[T] property or be upcasted to its supertype  until a type is found that
 * does not have a noVar property.
 *
 * This property allows usage of types such as "var x = 0; x = x + 1".
 *
 * @author Timm Felden
 */
property noVar;


/**
 * Flags a function to be an entry point to the program.
 *
 * @author Timm Felden
 */
property entryPoint;
