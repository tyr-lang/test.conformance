/**
 * Test flat Ref[T].
 */
val type T {

  test "instance" {
    // should eventually be rejected by the compiler
    val p : Ref[int]
  }

  test "new" {
    // should eventually be rejected by the compiler
    val p = Ref[int].from(0)
  }

  test "sane instance" {
    var i : int = 0
    val p = Ref[int].from(i)
  }

  test "usage" {
    var i : int = 0
    val p = Ref[int].from(i)
    i = 1
    p == 1
  }

  test "usage 2" {
    var i : int = 0
    val p = Ref[int].from(i)
    p = 1
    i == 1
  }

  test "compare" {
    var i : int = 0
    val p = Ref[int].from(i)
    i = 1
    p == p
  }

  test "assymetric compare" {
    var i : int = 0
    val p = Ref[int].from(i)
    i = 1
    i == p
  }
}
