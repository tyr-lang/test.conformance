/**
 * @note this test will eventually stop working!
 */
type integer[size : int] <: native {
  def ++ : integer[size] <: native, operator.precedence[250], operator.postfix;
  def -- : integer[size] <: native, operator.precedence[250], operator.postfix;

  def - : integer[size] <: native, operator.precedence[200];
  def ~ : integer[size] <: native, operator.precedence[200];

  def ** (x : integer[size]) : integer[size]
         <: native, operator.precedence[150], operator.rightAssociative;

  def * (x : integer[size]) : integer[size]
        <: native, operator.precedence[120];
  def \ (x : integer[size]) : integer[size]
        <: native, operator.precedence[120];
  def % (x : integer[size]) : integer[size]
        <: native, operator.precedence[120];

  def + (x : integer[size]) : integer[size]
        <: native, operator.precedence[110];
  def - (x : integer[size]) : integer[size]
        <: native, operator.precedence[110];

  def << (x : integer[size]) : bool
        <: native, operator.precedence[100];
  def >> (x : integer[size]) : bool
        <: native, operator.precedence[100];

  def < (x : integer[size]) : bool
        <: native, operator.precedence[90];
  def <= (x : integer[size]) : bool
        <: native, operator.precedence[90];
  def > (x : integer[size]) : bool
        <: native, operator.precedence[90];
  def >= (x : integer[size]) : bool
        <: native, operator.precedence[90];

  def != (x : integer[size]) : bool <: native, operator.precedence[80];
  def == (x : integer[size]) : bool <: native, operator.precedence[80];

  test "var" {
    var x = true
    x
  }

  test "val" {
    val x = true
    x
  }

  test "assign" {
    var x = 7
    x = 3
    x != 7 && 3 == x
  }

  test "assign assign" {
    var x : bool
    var y : bool
    x = y = 3
    x == y && 3 == x
  }

  test "assign in op" {
    var x : bool
    x = 7
    x = 3 && 3 == x
  }

  test "if" {
    if(-1 == 1) false else true
  }

  test "fancy if" {
    if ({var x = 0; x!=0}) if true true
  }

  test "block" {{{
    true
  }}}

  // code is bad if it stares at you ;)
  test "block O.O" {
    {{0};{0}}
    {{
      true
    }}
  }

  test "while" {
    var x = 0
    while(x <= 10) x = x + 1
  }

  test "do while" {
    var x = 0
    do x = x + 1
    while(x <= 10)
  }
}

/**
 * Literals are subtypes of arbitrary integers.
 */
type integerLiteral[size : int] <: integer[size];

// common integer names
type byte  := integer[8];
type short := integer[16];
type int   := integer[32];
type long  := integer[64];

/**
 * The entity is known by the compiler and has a special implementation.
 */
property native;

