/**
 * Test flat structures with mutable this.
 */
type point {

  var x : int;
  var y : int;

  new () {
    x = 0
    y = 0
  }

  new (x := x : int, y := y : int);

  def swap(this : Ref[point]) : point {
    return new point(y, x)
  }

  def + (this : Ref[point], p : point) : point {
    new point(x + p.x, y + p.y);
  }

  def * (this : Ref[point], s : int) : point {
    new point(s * x, s * y);
  }

  def == (this : Ref[point], q : point) : bool = x == q.x && y == q.y


  test "new" {
    val a = new point()
  }

  test "plain new" {
    new point()
  }

  test "new params" {
    var b = new point(1, 2)
  }

  test "swap" {
    var c = new point(1, 2)
    !(c == c.swap())
  }

  test "swap 2" {
    var d = new point(2, 2)
    d == d.swap()
  }
}
