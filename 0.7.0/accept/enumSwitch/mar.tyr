/**
 * This test shows switch over enums
 */
enum mixed {
  zero,
  naught = 0,
  one
}

enum other {
  zero
}

type T {
  with mixed.zero
  with mixed.naught
  with mixed.one

  test "use" {
    val c = zero
    switch c {
      if zero true
      else false
    }
  }

  test "use 2" {
    switch naught {
      if zero true
      else false
    }
  }

  // note to self: likely another category
  test "duplicate" <: noCompile[E_SWITCH_CASE] {
    switch naught {
      if zero true
      // twice the same value
      if naught true
      else false
    }
  }

  test "enum" <: noCompile[TYP_MISMATCH] {
    switch naught {
      // no, switch expected type is mixed
      if 0 true
      else false
    }
  }

  test "enum other" <: noCompile[NAM_NOT_FOUND_OVERLOAD_SINGLE] {
    switch naught {
      // no, switch expected type is mixed
      if other.zero true
      else false
    }
  }

  test "int" {
    var c : int = zero
    switch c {
      // CT-evaluates to 0
      if other.zero true
      else false
    }
  }

  test "int mixed" {
    var c : int = zero
    switch c {
      // CT evaluates to 0
      if other.zero true
      // CT evaluates to 1, fine for us
      if one false
      if 2 false
      else false
    }
  }

  test "int duplicate" <: noCompile[E_SWITCH_CASE] {
    switch 7 {
      // CT evaluates to 0
      if other.zero true
      // CT evaluates to 0 â‡’ duplicate
      if zero false
      else false
    }
  }

  test "enum join" {
    var x = 0
    val c = switch x {
      if 0 other.zero
      else zero
    }
    0 == (c : IntegerLiteral[32])
  }

  test "enum join enum" <: noCompile[NAM_NOT_FOUND_OVERLOAD_SINGLE] {
    var x = 0
    val c : mixed = switch x {
      if 0 other.zero
      else zero
    }
  }

  test "enum join enum 2" <: noCompile[NAM_NOT_FOUND_OVERLOAD_SINGLE] {
    var x = 0
    val c : other = switch x {
      if 0 other.zero
      else zero
    }
  }
}