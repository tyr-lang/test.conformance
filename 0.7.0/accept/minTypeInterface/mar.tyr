/**
 * This test ensures inheriting from a type interface results in the correct
 * type layout.
 */
public interface I[T : Type[_]] <: any {
  public class def f (left : T, right : T) : bool;
}

public type R[T : Type[_]] <: I[T] {
  new;
  override type def f (left : T, right : T) : bool = true;
}

type T {
  test "use class" <: noCompile[NAM_NOT_FOUND_OVERLOAD_SINGLE] {
    var x : R[int]
    // should not compile, because there shouldn't be a class member and even if
    // there were one, it would not take a class argument
    x.f(1,2)
  }
  test "use" {
    R[int].f(1,2)
  }
}