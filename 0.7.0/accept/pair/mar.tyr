/**
 * This test should eventually work fine and should not result in infinite type
 * instantiation.
 */
type Pair [A : Type[any], B : Type[any]] {
  type val eq : MinEQR[Pair[A,B]];

  var a : A;
  var b : B;

  new (a := a : A, b := b : B) {}

  def swap : Pair[B, A] = new Pair[B,A](b,a);

  def == (p : Pair[A,B]) = eq.equals(this, p)
  def != (p : Pair[A,B]) = !eq.equals(this, p)

  test "swap swap" {
    var p = new Pair[int, int](2,3)
    // this test requires Eq!
    p != p.swap() && p == p.swap().swap()
  }

  test "swap swap 2" {
    var p = new Pair[int, long](2,3L)
    p == p.swap().swap()
  }
}