with container.Iterator

/**
 * Test template identities
 *
 * @note to self: Template functions with class or object lifetime in classes
 *                cannot dispatch. In the same way as inline functions. The
 *                reason in that case is that they would require an unlimited
 *                number of IVTable slots. Each.
 */
type T {
  new;

  type val v : T = new T

  def f[V : Type](x : V) = x

  test "usage explicit" {
    f[bool].__base__[int](v, 7) == 7
  }

  test "regular" {
    v.f[int](7) == 7
  }
  test "usage this" <: noCompile[NAM_NOT_FOUND_OVERLOAD_SINGLE] {
    // v cannot be used as an implicit this because an implicit this is the
    // target of the most recent member access
    v.f[bool].__base__[int](7) == 7
  }
  test "usage" {
    f[bool].__base__[int](v, 7) == 7
  }
  test "twice" {
    f[bool].__base__[bool].__base__[int](v, 7) == 7
  }
}
