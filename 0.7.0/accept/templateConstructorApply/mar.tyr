/**
 * Test calls to template constructors; check correct binding of apply
 *
 * @note to self: the root issue here is to allow a constructor call to turn
 *   itself into a function via applicable
 */
type T <: proxy[int] {

  val z : int;

  new[y : int](r : int) {
    z = y + 2*r;
  }
  
  new[y : int] {
    z = y;
  }
  
  new (z := z : int = 0);

  def apply(x : int) : int = this + x;
  
  def implicit : int = 2*z
  /*
  
  test "brackets" <: noCompile {
    6 == (new T)(1)(1)
  }
  */
  test "brackets 2" {
    6 == new (T)(1)(1)
  }
  
  test "brackets 2b" {
    6 == (new T(1))(1)
  }
  /*
  test "brackets 3" {
    4 == (new T)(1)
  }

  test "usage"  {
    7 == new T[1](1)(1)
  }
  
  test "usage 2" {
    6 == new T(1)(1)
  }
  
  test "usage 2 default" {
    6 == new T[](1)(1)
  }
  
  test "usage 3" <: noCompile {
    3 == new T[1][1]
  }
  
  test "usage 4" {
    2 == new T[1]
  }
  
  test "usage 5" {
    4 == new T(1)
  }
  
  test "usage 5 default" {
    1 == new T()(1)
  }
  
  test "usage 6" {
    0 == new T
  }
  
  test "illegal" <: noCompile {
    new T(1)[1](1)
  }*/
}
