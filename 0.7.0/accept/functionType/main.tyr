/**
 * add syntax for function types because it allows us to pass native functions
 * as is and is easier to use than type interfaces
 */
class Apply[F : def (int) : int] {

  def apply(x : int) = F(x)

  test "use" {
    // note: in general, it cannot be that the overload resolution for the
    // parameter is based on the type of F because the current inference
    // strategy evaluates the parameter before the function, i.e. the type in
    // this case. This is a fundamental decision that cannot be changed in
    // general because we allow complex statements to yield what is "Apply" in
    // this case. To solve this issue, even Tyr 0.4 had coercions.
    var f = new Apply[int.`-` : def (int) : int]

    val r = -2 == f(2)

    delete f

    r
  }
}