/**
 * This test shows switch can bind the value used for switching to a name.
 * That name is a CT constant in if branches and a value on other branches.
 *
 * @note to self: this is kind of tricky but I need the mechanism anyway to
 * represent tagged union switches and type switches
 */
type T[v : int] {
  test "bind type" {
    0 == switch x := 0 {
      // the compiler needs to find out that x is 0 here
      if 0 T[x].v
      else x
    }
  }

  test "bind type else" /* compiles now */ {
    0 == switch x := 0 {
      if 0 x
      // x is an RT value here, but we can prove that it is 0
      else T[x].v
    }
  }

  test "bind type else var" <: noCompile[TYP_CT_REQUIRED] {
    var x = 0
    0 == switch x {
      if 0 x
      // x is an RT value here; cannot be allowed
      else T[x].v
    }
  }

  test "bind switch" {
    0 == switch x := 0 {
      if 0 switch y := x {
        // the compiler needs to find out that x is 0 here
        if x x
        else y
      }
      else x
    }
  }

  test "bind switch 3 x" {
    0 == switch x := 0 {
      if 0 switch y := x {
        if x switch z := y {
          if x z
          else z
        }
        else y
      }
      else x
    }
  }

  test "bind switch 3 y" {
    0 == switch x := 0 {
      if 0 switch y := x {
        if x switch z := y {
          if y z
          else z
        }
        else y
      }
      else x
    }
  }

  test "bind switch 3 duplicate" {
    0 == switch x := 0 {
      if 0 switch y := x {
        // the compiler needs to find out that x is 0 here
        if x x
        else y
      }
      else x
    }
  }

  test "bind switch else" /* compiles now */ {
    0 == switch x := 0 {
      if 0 x
      else switch y := x {
        // x is an RT value here; cannot be allowed
        if x y
        else y
      }
    }
  }

  test "bind switch else var" <: noCompile[TYP_CT_REQUIRED] {
    var x = 0
    0 == switch x {
      if 0 x
      else switch y := x {
        // x is an RT value here; cannot be allowed
        if x y
        else y
      }
    }
  }
}