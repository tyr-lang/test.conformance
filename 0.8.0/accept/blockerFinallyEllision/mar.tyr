with container.Array
with container.ArrayBuffer

/**
 * This is kind of an "am I right or is the rest of the world?" test.
 * If I cannot get it to work, it does not make sense to continue the project.
 * If I can, I can safely assume that ultimately the performance will be
 * slightly better than that of C++. And software development will eventually be
 * a lot cheaper than in any competing language.
 *
 * @note to self: if it doesn't I should check if running opt twice does the
 *   job; it could be that cross edge encoding is removed too late
 *
 * @note to self: actually, I'd assume that the catch in the finally cannot be
 *   optimized out as it could be triggered by an out of bounds throw or similar
 *   I doubt that it is provable that no throw will happen no matter how much
 *   we invest into no throw annotations and detection
 */
type mar:

test "fold four Array elements" <: provable {
  // have an array with for elements, add a try finally for auto deletion
  // check that clang is able to optimize out the entire stuff
  val x = new Array[int, 4]
  x(0) = 7
  x(1) = 3
  x(2) = 5
  x(3) = 12

  try {
    27 == x.fold(0) l,r do(l + r)
  } finally {
    delete x
  }
}

test "fold four ArrayBuffer elements" <: provable {
  // have an array with for elements, add a try finally for auto deletion
  // check that clang is able to optimize out the entire stuff
  val x = new ArrayBuffer[int]
  x(0) = 7
  x(1) = 3
  x(2) = 5
  x(3) = 12

  try {
    27 == x.fold(0) l,r do(l + r)
  } finally {
    delete x
  }
}
