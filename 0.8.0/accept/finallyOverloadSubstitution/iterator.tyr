with container.ArrayBuffer

/**
 * ensure that overload resolution within try finally works as expected
 */
class Iterator[T : Type[_]] <: container.Iterator[T]:

private val proxy : container.Iterator[T];

new (proxy := proxy : container.Iterator[T]);
delete {delete proxy}
override def next = proxy.next()
override def hasNext = proxy.hasNext()

override
def toBuffer : ArrayBuffer[T] <: mem.consumed = try {
  var r = new ArrayBuffer[T]
  while(hasNext()) {
    r += next()
  }
  r
} finally delete this

test "use" {
  var bs = new Iterator[byte]("0".bytes())
  var buf = bs.toBuffer()

  try {
    null == bs && 1U == buf.size()
  } finally delete buf
}