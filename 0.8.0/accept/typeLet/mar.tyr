/**
 * let should allow local definitions of non-trivial types
 *
 * @note  Unions should allow assignments but should implpcitly convert to one
 *  of the parameter types. As such, all equals checks without casts below must
 *  not compile. The only exception here is let since let is like a coercion
 *  and is transparent locally, i.e. the overload resolution is done against the
 *  assigned value and, there, it has the specific type of one side of sigval
 */
type mar:

type let sigval = int | observablePointer

test "int" {
  let x : sigval = 3
  3 == x
}

test "ptr" {
  let x : sigval = null
  null == observablePointer !! x
}

test "int val" <: noCompile[overload_single] {
  val x : sigval = 3
  3 == x
}

test "ptr val" <: noCompile[overload_single] {
  val x : sigval = null
  null == observablePointer !! x
}

test "symmetry" {
  // ensure that tests for int and ptr are symmetric or move to 0.9 and fix it
  // there
  false
}

test "both" {
  var r = true
  var x : sigval = 3
  r &= 3 == x

  x = null
  r &= null == x
  r
}