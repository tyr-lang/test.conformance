with enums.flagSet
with tyr.io.System

/**
 * tests correctness of try catch with nested functions
 */
enum S <: flagSet {
  Ex, NA, others, none, f, gb, ge, cb, ce
}

class T <: Exception, suppressCompilerMessage["E_OOP_PRIVACY_VIOLATED"] {
  type var state : S = S !! 0

  type def set(v : S) = state = S !! (state | v)

  type def c(ex : exceptions.Throwable) : void {
    set(S.cb)

    try {
      g(ex)
      set(S.none)
    } catch e {
      if Exception { set(S.Ex) }
      if exceptions.NullAccess { set(S.NA) }
      else { set(S.others) }
    }

    set(S.ce)
  }

  type def g(ex : exceptions.Throwable) : void {
    set(S.gb)
    f(ex)
    set(S.ge)
  }

  type def f(ex : exceptions.Throwable) : void {
    set(S.f)
    throw ex
  }

  test "ex" {
    c(new Exception)
    state == S.Ex | S.f | S.gb | S.cb | S.ce
  }
  test "null" {
    c(null)
    state == S.NA | S.f | S.gb | S.cb | S.ce
  }
  test "sub" {
    c(new T)
    state == S.Ex | S.f | S.gb | S.cb | S.ce
  }
  test "other" {
    try {
      c(new exceptions.FatalSegFault)
    } catch e {
      if exceptions.FatalSegFault {
        if (state == S.others | S.f | S.gb | S.cb)
          System.exit(0)
      }
    }
    false
  }
}
