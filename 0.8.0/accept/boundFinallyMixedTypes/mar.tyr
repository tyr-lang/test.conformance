with container.ArrayBuffer

/**
 * tests correctness of return/break/continue cross edges with finally blocks
 *
 * @note to self: I don't see why catch would be an issue, but finally is
 */
type mar:

type def init {
  var arr = new ArrayBuffer[String]

  arr += "möp"
  arr += "count"
  arr += ""
  arr += "☢"

  arr
}

test "simple chars" {
  var arr = init()

  9 == (arr.iterator().fold[int](0) s,v do {
    s + (v.chars().count _ do {v.size() < 15U}).sign().resize[32]()
  })
}

test "simple bytes" {
  var arr = init()

  12 == (arr.iterator().fold[int](0) s,v do {
    s + (v.bytes().count _ do {v.size() < 15U}).sign().resize[32]()
  })
}

test "fold fold chars" {
  false
}

test "fold fold bytes" {
  false
}

test "fold fold both" {
  false
}

test "count stateful mixed" {
  // rebuild the complex fold tests with counts and a local variable
  false
}

test "foreach stateful mixed" {
  // rebuild the complex fold tests with foreach and a local variable
  false
}