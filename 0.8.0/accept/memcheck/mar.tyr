/**
 * @note check that tests can be checked with memcheck ensuring that they won't
 *       use memory the wrong way
 */
class T {
  type val x = 0;

  // note: such an error cannot be detected atm:
  // this error category will be addressed once we have global initializer
  // ordering, as it should be a straight-forward extension of the code required
  // to calculate the ordering
  // type var y : int;

  test "no error" <: mempass {
    0 == x
  }

  // note: a test must pass memcheck and the test itself to pass
  // test "should fail" <: mempass {
  //   false
  // }

  test "uninit" <: memfail {
    var y : int

    0 == y || 0 == x
  }

  test "leak" <: memfail {
    new T
    true
  }

  test "double free" <: memfail {
    let x = new T
    delete x
    delete x
    true
  }
}
