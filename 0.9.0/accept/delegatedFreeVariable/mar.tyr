with container.ArrayBuffer

/**
 * ensure that delegating override implementation to an abstract class is
 * possible and type inference works as expected
 */
class Iterator[T : Type[_]] <: container.Iterator[T]:

// TODO note to self: I think the best option here is to detect that there is
// an undbound free variable here and create a suppressable error for let
// and an unsuppressible error for other field kinds since the template itself
// is not representable
private var proxy : container.Iterator;

new (proxy := proxy : container.Iterator);
delete {delete proxy}
override def next = proxy.next()
override def hasNext = proxy.hasNext()

override
def toBuffer : ArrayBuffer[T] <: mem.consumed = try {
  var r = new ArrayBuffer[T]
  while(hasNext()) {
    r += next()
  }
  r
} finally delete this

test "use" {
  // the issue here is that proxy is in fact not an iterator but the base template
  false

  var bs = new Iterator("0".bytes())
  var buf = bs.toBuffer()

  try {
    null == bs && 1U == buf.size()
  } finally delete buf
}