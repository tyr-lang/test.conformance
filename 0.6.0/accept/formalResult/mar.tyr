/**
 * test to ensure that the static type at call site of a formal parameter used
 * to compute the result type of a function can be used like that
 */
type T {
  // note: this should not be allowed; it should be either Class or native
  // note to self: this is basically the type-oriented way of something that can
  // also be expressed using template functions or higher order generic types
  type def f(this : Class, v : this) : this = v

  test "string" {
    "" == f(String, "")
  }

  test "int" <: noCompile[NAM_NOT_FOUND_OVERLOAD_SINGLE] {
    // note: this should not be allowed because Type has currently no runtime
    // representation and f is not native
    1 == f(int, 1)
  }

  test "any" <: noCompile[NAM_NOT_FOUND_OVERLOAD_SINGLE] {
    // note: at first glance, this looks identical to "int". However, the nature
    // of any can lead the compiler to do different things here.

    // cannot prove that this works
    1 == f(any, 1)
  }
}
