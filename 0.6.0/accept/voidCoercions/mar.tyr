/**
 * Some similar tests for cases where an expected type must or must not be void
 */
class T {
  test "bool block" <: noCompile[TYP_ILLEGAL_EXPECTED_TYPE] {
    {}:bool
  }
  test "switch condition" <: noCompile[TYP_ILLEGAL_EXPECTED_TYPE,TYP_MISMATCH] {
    switch {}{if {} {} else {}}
  }
  test "if condition" <: noCompile[TYP_ILLEGAL_EXPECTED_TYPE,TYP_MISMATCH] {
    if {}{}
  }
  test "bool if single" <: noCompile[TYP_ILLEGAL_EXPECTED_TYPE] {
    (if true{}):bool
  }
  test "bool while" <: noCompile[TYP_ILLEGAL_EXPECTED_TYPE] {
    (while false{}):bool
  }
  test "while guard" <: noCompile[TYP_ILLEGAL_EXPECTED_TYPE,TYP_MISMATCH] {
    while {}{}
  }
  test "do while guard" <: noCompile[TYP_ILLEGAL_EXPECTED_TYPE,TYP_MISMATCH] {
    do {} while {}
  }
  test "STA" <: noCompile[TYP_ILLEGAL_EXPECTED_TYPE] {
    T.type : void
  }
  test "DTA" <: noCompile[TYP_ILLEGAL_EXPECTED_TYPE] {
    T.class : void
  }
  test "DTA void" <: noCompile[TYP_ILLEGAL_EXPECTED_TYPE] {
    {}.class : Class[Object]
  }
  test "new void" <: noCompile[TYP_ILLEGAL_EXPECTED_TYPE] {
    (new T) : void
  }
  test "delete bool" <: noCompile[TYP_ILLEGAL_EXPECTED_TYPE] {
    (delete new T) : bool
  }
  test "void var" <: noCompile[TYP_ILLEGAL_EXPRESSION] {
    var x = {}
  }
  test "any var" <: noCompile[TYP_NOT_REPRESENTABLE,E_OOP_PRIVACY_VIOLATED] {
    var x = mem.raw.`new`(T)
  }
}
