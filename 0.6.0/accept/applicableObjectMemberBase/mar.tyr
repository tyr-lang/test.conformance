/**
 * Ensure implicits on object member applications are performed as intended
 *
 * @note add a base type to ensure that the correct function is used
 */
public class Base[T : Type] {
  type var b : T;

  def f(this : Base[T], y : T) : T = b
  def g(this : Base[T], y : T) : T = b
  def h(this : Base[T], y : T) : Ref[T] = b
}

public class Box[T : Type] <: Base[T] {
  var x : T;

  override def f(this : Box[T], y : T) : T = y
  override def g(this : Box[T], y : T) : T = x
  override def h(this : Box[T], y : T) : Ref[T] = x

  public new (x := x : T);
}

public class T {
  type var a = new Box[int](7);

  test "use f" {
    Base[int].b = 0
    7 == a.f(a.x)
  }
  test "use f static" {
    Base[int].b = 0
    7 == Box[int].f(a, a.x)
  }

  test "use g" {
    Base[int].b = 0
    7 == a.g(a.x)
  }
  test "use g static" {
    Base[int].b = 0
    7 == Box[int].g(a, a.x)
  }

  test "use h" {
    Base[int].b = 0
    7 == a.h(a.x)
  }
  test "use h static" {
    Base[int].b = 0
    7 == Box[int].h(a, a.x)
  }
}
