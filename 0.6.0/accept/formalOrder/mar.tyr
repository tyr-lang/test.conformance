/**
 * test order of and dependency between formal parameters
 */
type Box[T : Type, D : T]{
  val v : T;

  new (v := V : T = D){}
}

type InvBox[D : T, T : Type]{
  val v : T;

  new (v := V : T = D){}
}

type T {
  test "box" {
    1 == (new Box[int, 1]).v
  }
  test "box no brace" {
    1 == new Box[int, 1].v
  }
  test "box explicit" {
    1 == (new Box[D := 1, T := int]).v
  }
  test "invbox" {
    1 == (new InvBox[1, int]).v
  }
  test "fun with types" <: noCompile {
    // note: this test is currently a no compile test, because the compiler
    // cannot prove that this is the case; if CT evaluation is improved
    // substentially, this test might turn into valid Tyr
    1 == (new (new Box[Type, Box]).v[int, 1]).v
  }

  test "int double" <: noCompile {
    1 == (new Box[int, 1.0]).v
  }

  test "three numbers" <: noCompile {
    1 == (new Box[1, 2, 3]).v
  }
}
