/**
 * Test several uses of return statements.
 */
type T {

  type def f : void {
    if false return
  }

  type def g : void {
    return
  }

  type def h : void {
    if true return
    else return
  }

  type def i : int {
    return if false return 0
           else 1
  }

  test "flow" {
    f()
  }

  test "simple" {
    g()
  }

  test "simple test" {
    return true
  }

  test "explicit flow" {
    h()
  }

  test "explicit flow result" {
    i()
  }

  test "explicit flow result test" {
    return if false return false
           else true
  }

  /**
   * not allowed, because it is not bool
   */
  test "void return test" <: noCompile {
    return;
  }

  /**
   * not allowed, because it is not bool
   * we do not care that the result would be binary compatible to bool
   */
  test "int return test" <: noCompile {
    return 1i1;
  }

  /**
   * not allowed, because it is not bool
   * we do not care that the result would be binary compatible to bool
   */
  test "int inline return test" <: noCompile {
    true && ({ return 1i1 } : bool)
  }

  /**
   * not allowed, because it is not bool
   * we do not care that the result would be binary compatible to bool
   */
  test "int dead inline return test" <: noCompile {
    true || ({ return 1i1 } : bool)
  }
}
