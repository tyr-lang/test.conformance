/**
 * Test flat Ref[T].
 */
type T {

  test "instance" <: noCompile[SYN_MALFORMED_EXPRESSION] {
    val p : Ref[int]
  }

  test "ref zero/null" <: noCompile[TYP_ILLEGAL_EXPECTED_TYPE] {
    val p : Ref[int] = 0
  }

  test "sane instance" {
    var i : int = 0
    val p : Ref[int] = i
  }

  test "usage" {
    var i : int = 0
    val p : Ref[int] = i
    i = 1
    p == 1
  }

  test "usage 2" {
    var i : int = 0
    val p : Ref[int] = i
    p = 1
    i == 1
  }

  test "compare" {
    var i : int = 0
    val p : Ref[int] = i
    i = 1
    p == p
  }

  test "assymetric compare" {
    var i : int = 0
    val p : Ref[int] = i
    i = 1
    i == p
  }
}
