/**
 * test global functions
 *
 * @note revoked parameterless call in Tyr 0.6.0 because this creates an
 *       ambiguity with function pointer access
 */
type T {

  type def f : void {
    7 + 3
    return
  }

  type def g : bool = false

  type def h : void {
  }

  test "basic" {
    f()
    h()
    !g()
  }

  test "while no param" <: noCompile[NAM_NOT_FOUND_OVERLOAD] {
    while(g) f();
    true
  }

  test "while" {
    while(g()) f();
    true
  }

  test "while short no param" <: noCompile[NAM_NOT_FOUND_OVERLOAD] {
    while g f
  }

  test "while short" {
    while g() f
  }

  test "while call" {
    while(g()) f();
    true
  }

  test "do while" <: noCompile[NAM_NOT_FOUND_OVERLOAD] {
    do {
      f()
    } while(g);
    true
  }

  test "do while call" {
    do {
      f()
    } while(g());
    true
  }
}
