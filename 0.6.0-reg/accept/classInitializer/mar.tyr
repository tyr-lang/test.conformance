/**
 * This test is meant to ensure that default constructor, destructor and
 * initialization of class fields work as intended.
 */

with tyr.io.CString;

class Upper {
  // pick a strange value to ensure that it is not zero out of accident
  class var instances : int = 31337

  new {
    ++this.instances
  }
  delete {
    --this.instances
  }

  def f = true

  type def print(this : int) : void {
    var format = new CString("%i\n");
    printf1i(format, this)
    delete format
  }

  type def printf1i (format : CString, value : int) : int extern c.printf

  type def dump {
    "Upper "!!; print(Upper.instances)
    "Lower "!!; print(Lower.instances)
  }
}

class Lower <: Upper {
  // implicit new should be new := Upper.new
  // implicit delete should be delete := Upper.delete

  override
  def f = false

  test "dynamic lower" {
    val x = new Lower
    val r = x.f()
    delete x
    !r
  }

  test "dynamic upper" {
    val x : Upper = new Lower
    val r = x.f()
    delete x
    !r
  }

  test "dual upper" {
    val x = new Lower
    val r = Upper.f(x)
    delete x
    r
  }

  test "Upper instances" {
    31337 == Upper.instances
  }

  test "Lower instances" {
    31337 == Lower.instances
  }

  test "instances" {
    val x : Upper = new Lower
    val y = new Upper

    val first = 31338 == Upper.instances &! 31338 == Lower.instances
    dump()

    delete x

    val second = 31338 == Upper.instances &! 31337 == Lower.instances
    dump()

    delete y

    val third = 31337 == Upper.instances &! 31337 == Lower.instances
    dump()

    first &! second &! third
  }
}