/**
 * Test explicit override with multiple arguments.
 */
interface I {
  def fun (x : T) : int = 1
}
interface J <: I {
  def fun (x : I) : int = 2
}

class S {
  def fun (x : T) : int = 3
}

class T <: S, I, J {

  override [S.fun]
  def fun(x : T) := S.fun;

  // a second override of a function that would be folded into the one above
  // requires explicit this
  override [I.fun]
  type def fun(this : J, x : I) := J.fun;

  test "call T obj" {
    var x = new T

    // note: in this form, the obj def is checked first and shadows the type def
    val r = x.fun(x)
    delete x
    3 == r
  }
  test "call T" {
    var x = new T

    // note: my change in Tyr 0.6.1 turned this legal because the object def is
    // a more precise match
    val r = T.fun(x, x)
    delete x
    3 == r
  }
  test "call T typ I" {
    var x = new T

    // note: my change in Tyr 0.6.1 turned this legal because the object def is
    // a more precise match
    val r = T.fun(x, Ref[I] !! x)
    delete x
    2 == r
  }
  test "call T typ J" {
    var x = new T

    // note: explicit look in J's ITable
    val r = (Ref[J] !! x).fun(x,x)
    delete x
    2 == r
  }
  test "call T typ J static" {
    var x = new T

    // note: explicit cast to this to avoid ambiguity
    val r = T.fun((Ref[J] !! x),x)
    delete x
    2 == r
  }
  test "call T dual" {
    var x = new T

    // note: in this form, the obj def is checked first and shadows the type def
    val r = x.fun(this := x, x)
    delete x
    3 == r
  }

  test "call S" {
    var t = new T
    var x : S = t

    val r = x.fun(t)
    delete x
    3 == r
  }
  test "call I" {
    var t = new T
    var x : I = t

    val r = x.fun(t)
    delete x
    2 == r
  }
  test "call J" {
    var t = new T
    var x : J = t

    val r = x.fun(t)
    delete x
    2 == r
  }
}
