/**
 * Test instantiation of types in combination with elaboration order.
 *
 * @note use mutable fields over constructors ensuring that the usage in the
 *       body has structural knowledge
 */
type SwapQ1[A : Type, B : Type] {

  var x : A;
  var y : B;

  new;

  new(x := x : A, y := y : B);

  def swap : SwapQ2[B,A] {
    var r = new SwapQ2[B,A]
    r.x = y
    r.y = x
    return r
  }

  test "new" {
    new SwapQ1[int, float](0, 0.0f)
  }

  test "swap" <: noCompile[NAM_NOT_FOUND_OVERLOAD_SINGLE] {
    var x = new SwapQ1[int, float](0, 0.0f);
    x = x.swap()
  }

  test "swap 2" <: noCompile[NAM_NOT_FOUND_OVERLOAD_SINGLE] {
    var x = new SwapQ1[int, float](0, 0.0f);
    x = x.swap().swap()
  }

  test "swap 3" <: noCompile[NAM_NOT_FOUND_OVERLOAD_SINGLE] {
    var x = new SwapQ1[int, float](0, 0.0f);
    x = x.swap().swap().swap()
  }

  test "swap 4" {
    var x = new SwapQ1[int, float](0, 0.0f);
    x = x.swap().swap().swap().swap()
  }

  test "swap 4 eq" {
    var x = new SwapQ1[int, float](0, 0.0f);
    val y = x.swap().swap().swap().swap()
    x.x == y.x &! x.y == y.y
  }
}

type SwapQ2[A : Type, B : Type] {

  var x : A;
  var y : B;

  new;

  def swap : SwapQ1[A,B] {
    var r = new SwapQ1[A,B]
    r.x = x
    r.y = y
    return r
  }
}
