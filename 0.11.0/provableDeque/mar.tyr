with tyr.container.ArrayDeque
with tyr.lang.container.range

/**
 * Basic array-based container operations should be provable
 *
 * @note  this proof requires either bifr√∂st tracking types and removing
 *  dispatching calls or sleipnir doing CHA/final analysis removing dispatching
 *  calls. The latter would require changing the IR accordingly. Both analyses
 *  can be implemented and provide improvements independently.
 */
type mar:

test "stack" <: provable {
  var xs = new ArrayDeque[String]
  var r = xs.empty()

  xs.push("")
  xs.push("-")

  r &= 2U == xs.size()

  r &= "-" == xs.peek()
  r &= "-" == xs.peek()
  r &= "-" == xs.peek()
  r &= 2U == xs.size()

  r &= "-" == xs.pop()

  r &= "" == xs.pop()

  r &= xs.empty()

  delete xs
  r
}

test "stack reverse" <: provable {
  var xs = new ArrayDeque[String]
  var r = xs.empty()

  xs.pushFront("")
  xs.pushFront("-")

  r &= 2U == xs.size()

  r &= "-" == xs.peekFront()
  r &= "-" == xs.peekFront()
  r &= "-" == xs.peekFront()
  r &= 2U == xs.size()

  r &= "-" == xs.popFront()
  r &= "" == xs.popFront()

  r &= xs.empty()
  delete xs
  r
}

test "method slot analysis" {
  // TODO irrespective of the other optimizations, there should be an
  // optimization on dispatching calls in sleipnir where only one instance is
  // ever put into a method slot; in that case, the entire method slot should be
  // elided
  false
}

test "unused vmember/imember analysis" {
  // TODO irrespective of the other optimizations, there should be an
  // optimization on uses of imembers and vmembers (in that order)
  // note to self: requires manual inspection
  // note to self: this optimization should be implemented in sleipnir and
  //  draupnir and it should be accompanied with a warning in draupnir where the
  //  member is not accessible
  false
}