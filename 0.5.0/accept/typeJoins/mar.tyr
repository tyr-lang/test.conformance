/**
 * test correct implementation of join
 */
type MyInt {
  // prevent CT evaluation of predicates
  type var phi = true;
  // prevent CT evaluation of predicates
  type var phiX = 7;

  test "same" {
    val v = if phi 7 else 7
    v : IntegerLiteral[32]
    // v.type == IntegerLiteral[32]
  }

  test "any" <: noCompile[TYP_ILLEGAL_EXPRESSION] {
    val v = if phi 7 else 7L
    // v.type == void // because join knows that it cannot represent its result
  }

  test "any string" <: noCompile[TYP_ILLEGAL_EXPRESSION] {
    val v = if phi 7 else ""
    // v.type == void // because join knows that it cannot represent its result
  }

  test "literal" {
    val v = if phi 7 else (7 : int)
    v : int
    // v.type == int
  }

  test "void" <: noCompile[TYP_ILLEGAL_EXPRESSION] {
    val v = if phi {} else {}
    v : void
    // v.type == void
  }

  test "any void" <: noCompile[BUG] {
    var x = 0
    val v = if phi x else {}
    // v.type == any
  }

  test "literal string" {
    var s = "" // String -> noVar
    val v = if phi s else ""
    v : String
    // v.type == String
  }

  test "null" {
    val v = if phi null else ""
    v : StringLiteral
    // v.type == StringLiteral
  }

  test "same Null" {
    val v = if phi null else null
    v : Null
    // v.type == Null
  }

  test "int Null" <: noCompile[TYP_ILLEGAL_EXPRESSION] {
    val v = if phi 7 else Null
    // v.type == void
  }

  test "var null" <: noCompile[TYP_ILLEGAL_EXPRESSION] {
    var x = 7
    val v = if phi null else x
    // v.type == void
  }

  test "var string" <: noCompile[TYP_ILLEGAL_EXPRESSION] {
    var x = 7
    val v = if phi "" else x
    // v.type == void
  }

  test "var string val string" {
    var x = ""
    val y = ""
    val v = if phi y else x
    v : String
    // v.type == String
  }

  test "multi int" {
    val v = switch phiX {
      if 0 0
      if 7 4
      else (1 : int)
    }
    v : int
    // v.type == int
  }

  test "multi any" <: noCompile[TYP_ILLEGAL_EXPRESSION] {
    val v = switch phiX {
      if 0 0
      if 7 null
      else (1 : int)
    }
    // v.type == void
  }

  test "multi String" {
    val v = switch phiX {
      if 0 ("" : String)
      if 7 null
      else ""
    }
    v : String
    // v.type == String
  }

  test "multi object" {
    val v = switch phiX {
      if 0 "".type
      if 7 null
      else ""
    }
    v.type == Object
  }
}
