/**
 * Create an array type with < > access operators, just as a proof of concept
 */
class Array[Base : Type[any]] {
  var data : container.FlatArray[Base]
  val size : container.size_t
  
  new(size : container.index_t) {
    this.size = size.unpack
    data = new container.FlatArray[Base](this.size)
  }
  delete {
    delete data;
  }

  def get(index : container.index_t) : Base = data.apply(index.unpack);

  def set(v : Base, index : container.index_t) : void = data.update(index.unpack, v);


  // prefer this operator over container.size_t <, because it would yield a bool and get stuck
  def < (index : container.index_t) : ArrayIndexOp[Base] <: operator.precedence[91] {
    new ArrayIndexOp[Base](this, index.unpack);
  }

  test "use" {
    val arr = new Array[int](2L)
    val arr2 = new Array[Array[int]](2L)
    arr<0L> = 0
    arr2<0L> = arr
    // 0 == arr2 < 0L > < 0L >
    0 == arr2<0L> <0L>
  }
}

/**
 * This is the type of "array<index",i.e. without ">"
 */
type ArrayIndexOp[T : Type[any]] <: noVar {
  val target : Array[T]
  val index : container.size_t;

  new (target := target : Array[T], index := index : container.size_t);

  // prefer this operator over container.size_t <, because it would yield a bool and get stuck
  def > : ArrayAccessOp[T] <: operator.precedence[91], operator.postfix
        = new ArrayAccessOp[T](target, index)
}

/**
 * This is the type of > in "array<index>"

 */
type ArrayAccessOp[T : Type[any]] <: proxy[T], joinImplicit, noVar {
  val target : Array[T]
  val index : container.size_t;

  new (target := target : Array[T], index := index : container.size_t);

  def implicit() : T = target.get(index)

  def `=` (v : T) : void = target.set(v, index)
}
